"""
Django settings for SASTF project.
Generated by 'django-admin startproject' using Django 4.1.7.
For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import json
import logging

from pathlib import Path
from os import environ as env

# TODO: cleanup
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DETAILS_DIR = BASE_DIR / "json" / "templates"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(env.get("DJANGO_DEBUG", default=1))

try:
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = env["DJANGO_SECRET_KEY"]
except KeyError as err:
    if DEBUG:
        SECRET_KEY = (
            "django-insecure-vgh0!k)t1(4$5gb+f*g#$&lqwx6k%dp+d!x8v%jh1ct9%y=q+a"
        )
    else:
        raise RuntimeError(
            "Could not start due to invalid project settings: Please specify a "
            "secret key in your environment file."
        )

MEDIA_ROOT = env.get("DJANGO_STORAGE_ROOT", "")
MEDIA_URL = env.get("DJANGO_STORAGE_URL", "")
if not MEDIA_ROOT:
    if DEBUG:
        MEDIA_ROOT = str(BASE_DIR)
    else:
        raise RuntimeError(
            "Could not find a valid MEDIA_ROOT setting. Use a shared "
            "storage to launch multiple web instances."
        )

if not MEDIA_URL:
    if DEBUG:
        MEDIA_URL = str(BASE_DIR) + "/"
    else:
        raise RuntimeError("Could not find a valid MEDIA_URL setting.")

ALLOWED_HOSTS = env.get("DJANGO_ALLOWED_HOSTS", "*").split(":")

SESSION_EXPIRE_AT_BROWSER_CLOSE = int(
    env.get("DJANGO_SESSION_EXPIRE_AT_BROWSER_CLOSE", 1)
)
SESSION_COOKIE_AGE = int(env.get("DJANGO_SESSION_COOKIE_AGE", 3600))  # 1h
# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.admin",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "sastf.SASTF",
    "rest_framework",
    "django_celery_results",
    "drf_yasg",
]

if DEBUG:
    INSTALLED_APPS.append("django_extensions")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "sastf.SASTF.middleware.FirstTimeMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

ROOT_URLCONF = "sastf.SASTF.urls"
GRAPH_MODELS = {
    "all_applications": True,
    "group_models": True,
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

WSGI_APPLICATION = "sastf.SASTF.wsgi.application"

# HTTPS
if str(env.get("DJANGO_HTTPS", False)).lower() == str(True).lower():
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    CSRF_TRUSTED_ORIGINS = env.get("DJANGO_CSRF_TRUSTED_ORIGINS", default="").split("|")

    if len(CSRF_TRUSTED_ORIGINS) == 0:
        raise RuntimeError(
            "Invalid HTTPS configuration: Make sure you set up CSRF trusted "
            "origins as your instance won't be able to validate CSRF tokens "
            "without this configuration."
        )

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": env.get("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": env.get("DB_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": env.get("DB_USER", "user"),
        "PASSWORD": env.get("DB_PASSWORD", "password"),
        "HOST": env.get("DB_HOST", "localhost"),
        "PORT": env.get("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

FILE_UPLOAD_HANDLERS = ["django.core.files.uploadhandler.TemporaryFileUploadHandler"]

# Celery
CELERY_RESULT_BACKEND = env.get("CELERY_RESULT_BACKEND", "django-db")
CELERY_BROKER_URL = env.get("CELERY_BROKER_URL", "pyamqp://")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -!- START SASTF-CONFIG -!-
SASTF_PASSWD_MIN_LEN = 12
SASTF_USERNAME_MIN_LEN = 3
SASTF_FT_DIR = env.get("SASTF_FT_DIR", "") or str(
    BASE_DIR / "json" / "finding_templates"
)
# -!- END SASTF-CONFIG -!-

YARA_BASE_DIR = str(env.get("YARA_BASE_DIR", BASE_DIR / "yara"))

SEMGREP_BASE_DIR = Path("/semgrep")
SEMGREP_ANDROID_RULES_DIR = SEMGREP_BASE_DIR / "android"
SEMGREP_IOS_RULES_DIR = SEMGREP_BASE_DIR / "ios"

LIBSOUT_PROFILES_DIR: str = env.get("LIBSCOUT_PROFILES_DIR", str(BASE_DIR / "profiles"))
LIBSOUT_ANDROID_JAR: str = env.get(
    "LIBSCOUT_ANDROID_JAR", str(BASE_DIR / "android.jar")
)
# -!- START USER-CONFIG -!-

PROJECTS_ROOT = Path(MEDIA_ROOT) / "projects"
if not PROJECTS_ROOT.exists():
    PROJECTS_ROOT.mkdir(exist_ok=True, parents=True)

API_ONLY = int(env.get("SASTF_API_ONLY", default=0))

D2J_TOOLSET = os.getenv("TOOLS_BAKSMALI", "d2j")
APKTOOL = os.getenv("TOOLS_APKTOOL", "apktool")
JADX = env.get("JADX_TOOL", "jadx")

# TODO:(remove)
PROJECTS_TABLE_COLUMNS = [
    "ID",  # the project's ID won't be visible directly
    "Project Name",
    "Owner",
    "Last Scan Origin",
    "Last Scan",
    "Tags",
    "Risk Level",
    "High",
    "Medium",
    "Low",
]

# -!- END USER-CONFIG -!-
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(levelname)s] %(asctime)-15s - %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "color": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s[%(levelname)s] (%(asctime)-15s) %(name)s::%(funcName)s[line=%(lineno)d] - %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
            "log_colors": {
                "DEBUG": "cyan",
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "bold_red",
            },
        },
    },
    "handlers": {
        "logfile": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "debug.log"),
            "formatter": "standard",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "color",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "logfile"],
            "level": "INFO",
            "propagate": True,
        },
        "django.db.backends": {
            "handlers": ["console", "logfile"],
            "level": "INFO",
            "propagate": False,  # Don't propagate to other handlers
        },
        "sastf.SASTF": {
            "handlers": ["console", "logfile"],
            "level": "DEBUG",
            "propagate": False,
        },
        "celery": {"handlers": ["console", "logfile"], "level": "DEBUG"},
    },
}

ARTICLES = {}
for platform in DETAILS_DIR.iterdir():
    if platform.is_dir():
        data = []
        for file in platform.iterdir():
            data.append(
                {
                    "internal_name": file.stem.lower().replace(" ", "-"),
                    "name": file.stem,
                }
            )
        ARTICLES[platform.name.capitalize()] = data

logger.info(f"INIT - Collected and imported {len(ARTICLES)} article templates.")

FILE_ICONS_DIR = BASE_DIR / "static" / "static" / "filetypes"
FILE_TYPES = {}
for x in FILE_ICONS_DIR.iterdir():
    name = x.stem.lower()
    path = x.as_posix()
    FILE_TYPES[name] = {"icon": path[path.find("/static/") :]}

logger.info(f"INIT - Collected {len(FILE_TYPES)} different file types.")
ICON_RULES_PATH = BASE_DIR / "json" / "filetypes_rules.json"
if not ICON_RULES_PATH.exists():
    raise FileNotFoundError("Could not find file tree rules!")

with open(str(ICON_RULES_PATH), encoding="utf-8") as fp:
    FILE_RULES = json.load(fp)
